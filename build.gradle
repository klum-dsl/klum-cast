buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}

plugins {
    id 'nebula.release' version '15.2.0'
    id 'base'
    id 'groovy'
    id 'jacoco'
    id 'signing'

    id 'nebula.maven-publish' version '17.3.2'
    id 'nebula.javadoc-jar' version '17.3.2'
    id 'nebula.source-jar' version '17.3.2'
    id 'nebula.contacts' version '5.1.0'
    //id 'nebula.info' version '9.1.2' apply false
    id "com.github.hierynomus.license" version "0.15.0"
//    id 'org.ajoberstar.git-publish' version '3.0.1'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id "com.github.ben-manes.versions" version "0.36.0"
    id "io.github.gradle-nexus.publish-plugin" version "1.1.0"
}

ext {
    groovyVersion = project.findProperty("groovyVersion") ?: '2.4.21'
    // groovyVersion = '4.0.12'
}

group 'com.blackbuild.klum.cast'
description 'Checks for automatic validation of annotation placement during AST transformations.'

nexusPublishing {
    repositories {
        sonatype()
    }
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}
jacoco {
    toolVersion = "0.8.2"
}

dependencies {
    compileOnly "org.jetbrains:annotations:16.0.2"
    compileOnly "org.codehaus.groovy:groovy-all:2.4.21"

    //compileOnly "com.intellij:openapi:7.0.3"

    if (project.ext.groovyVersion.startsWith("2.")) {
        testImplementation "org.codehaus.groovy:groovy-all:$project.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:1.3-groovy-2.4")
    } else if (project.ext.groovyVersion.startsWith("3.")) {
        testImplementation "org.codehaus.groovy:groovy-all:$project.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:2.3-groovy-3.0")
        testImplementation("org.spockframework:spock-junit4:2.3-groovy-3.0")
    } else if (project.ext.groovyVersion.startsWith("4.")){
        testImplementation "org.apache.groovy:groovy-all:$project.ext.groovyVersion"
        testImplementation("org.spockframework:spock-core:2.3-groovy-4.0")
        testImplementation("org.spockframework:spock-junit4:2.3-groovy-4.0")
    } else {
        throw new IllegalStateException("Unsupported Groovy version ${project.ext.groovyVersion}")
    }
    testImplementation "org.jetbrains:annotations:16.0.2"

    testRuntimeOnly "net.bytebuddy:byte-buddy:1.9.3"
    testRuntimeOnly "org.objenesis:objenesis:2.6"
}

contacts {
    'stephan@blackbuild.com' {
        moniker 'Stephan Pauxberger'
        github 'pauxus'
    }
}

publishing {
    publications {
        nebula(MavenPublication) {
            suppressPomMetadataWarningsFor('testFixturesApiElements')
            suppressPomMetadataWarningsFor('testFixturesRuntimeElements')
            pom {
                url = "https://github.com/klum-dsl/klum-cast"
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                scm {
                    connection = 'scm:git:git@github.com:klum-dsl/klum-cast.git'
                    developerConnection = 'scm:git:git@github.com:klum-dsl/klum-cast.git'
                    url = 'https://github.com/klum-dsl/klum-cast'
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask("publish") || gradle.taskGraph.hasTask("publishToMavenLocal") }
    sign publishing.publications.nebula
}

license {
    header = file("LICENSE")
    mapping("java", "SLASHSTAR_STYLE")
    mapping("groovy", "SLASHSTAR_STYLE")
    mapping("gdsl", "SLASHSTAR_STYLE")
    exclude("mockup/**")
    strictCheck(true)
}

test {
    if (!project.ext.groovyVersion.startsWith("2."))
        useJUnitPlatform()
}

/*
gitPublish {
    repoUri = 'git@github.com:klum-dsl/klum-cast.wiki.git'
    branch = 'master'

    contents {
        from 'wiki'
        filesMatching('*.md') {
            filter(ReplaceTokens, tokens: [version: version.toString()])
        }
        from('.') {
            include("CHANGES.md")
            rename('CHANGES.md', "Changelog.md")
        }
    }

    repoDir = file("$buildDir/gitPublish")

    commitMessage = "updated wiki for $version"
}
tasks.candidate.finalizedBy tasks.gitPublishPush
tasks.final.finalizedBy tasks.gitPublishPush
*/

releaseCheck.doLast {
    if (!gradle.includedBuilds.isEmpty())
        throw new GradleException("Releasing is not allowed with composite builds. Please release $gradle.includedBuilds separately")

    if (JavaVersion.current() != JavaVersion.VERSION_11)
        throw new GradleException("Releasing must be done with JDK 11")

    if (!project.ext.groovyVersion.startsWith("2."))
        throw new GradleException("Releasing must be done with Groovy 2.4")
}
